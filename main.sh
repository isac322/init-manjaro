#!/bin/bash

# Created by argbash-init v2.10.0
# ARG_OPTIONAL_SINGLE([mirror],[m],[Manjaro Mirror],[stable])
# ARG_OPTIONAL_SINGLE([type],[t],[Installation type],[server])
# ARG_OPTIONAL_SINGLE([graphic],[g],[GPU type])
# ARG_OPTIONAL_BOOLEAN([wayland],[],[Enable Wayland (Not recommended yet)])
# ARG_OPTIONAL_BOOLEAN([docker],[],[Install Docker & compose],[on])
# ARG_OPTIONAL_SINGLE([ftpd],[],[Install specified ftpd and enable sshguard for it])
# ARG_OPTIONAL_BOOLEAN([openvpn3],[],[Install openvpn3-linux])
# ARG_OPTIONAL_BOOLEAN([openssh-hpn],[],[Install hpn patched openssh])
# ARG_OPTIONAL_BOOLEAN([borg-server],[],[Install borg backup server])
# ARG_OPTIONAL_BOOLEAN([deluged],[],[Install deluge daemon])
# ARG_OPTIONAL_BOOLEAN([swapspace],[],[Install swapspace],[on])
# ARG_OPTIONAL_BOOLEAN([iptables],[],[Setup iptables],[on])
# ARG_OPTIONAL_BOOLEAN([certbot],[],[Install cerbot and enable auto renewal])
# ARG_OPTIONAL_BOOLEAN([k8s-utils],[],[Install kubernetes utilities],[on])
# ARG_OPTIONAL_BOOLEAN([mount-hdds],[],[Register and mount attached HDDs])
# ARG_OPTIONAL_BOOLEAN([dry-run],[],[Do not execute scripts])
# ARG_TYPE_GROUP_SET([instance_type],[INSTANCE_TYPE],[type],[desktop,server])
# ARG_TYPE_GROUP_SET([gpu_type],[GPU_TYPE],[graphic],[nvidia,intel])
# ARG_TYPE_GROUP_SET([mirror_type],[MIRROR_TYPE],[mirror],[testing,stable])
# ARG_TYPE_GROUP_SET([ftpd_type],[FTPD_TYPE],[ftpd],[pure-ftpd,vsftpd])
# ARGBASH_SET_DELIM([ =])
# ARG_OPTION_STACKING([getopt])
# ARG_RESTRICT_VALUES([no-local-options])
# ARG_HELP([Initial setup for manjaro])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.10.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
	local _ret="${2:-1}"
	test "${_PRINT_HELP:-no}" = yes && print_help >&2
	echo "$1" >&2
	exit "${_ret}"
}


evaluate_strictness()
{
	[[ "$2" =~ ^-(-(mirror|type|graphic|wayland|docker|ftpd|openvpn3|openssh-hpn|borg-server|deluged|swapspace|iptables|certbot|k8s-utils|mount-hdds|dry-run|help)$|[mtgh]) ]] && die "You have passed '$2' as a value of argument '$1', which makes it look like that you have omitted the actual value, since '$2' is an option accepted by this script. This is considered a fatal error."
}

# validators

instance_type()
{
	local _allowed=("desktop" "server") _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'desktop' and 'server'" 4
}


gpu_type()
{
	local _allowed=("nvidia" "intel") _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'nvidia' and 'intel'" 4
}


mirror_type()
{
	local _allowed=("testing" "stable") _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'testing' and 'stable'" 4
}


ftpd_type()
{
	local _allowed=("pure-ftpd" "vsftpd") _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'pure-ftpd' and 'vsftpd'" 4
}


begins_with_short_option()
{
	local first_option all_short_options='mtgh'
	first_option="${1:0:1}"
	test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_mirror="stable"
_arg_type="server"
_arg_graphic=
_arg_wayland="off"
_arg_docker="on"
_arg_ftpd=
_arg_openvpn3="off"
_arg_openssh_hpn="off"
_arg_borg_server="off"
_arg_deluged="off"
_arg_swapspace="on"
_arg_iptables="on"
_arg_certbot="off"
_arg_k8s_utils="on"
_arg_mount_hdds="off"
_arg_dry_run="off"


print_help()
{
	printf '%s\n' "Initial setup for manjaro"
	printf 'Usage: %s [-m|--mirror <MIRROR_TYPE>] [-t|--type <INSTANCE_TYPE>] [-g|--graphic <GPU_TYPE>] [--(no-)wayland] [--(no-)docker] [--ftpd <FTPD_TYPE>] [--(no-)openvpn3] [--(no-)openssh-hpn] [--(no-)borg-server] [--(no-)deluged] [--(no-)swapspace] [--(no-)iptables] [--(no-)certbot] [--(no-)k8s-utils] [--(no-)mount-hdds] [--(no-)dry-run] [-h|--help]\n' "$0"
	printf '\t%s\n' "-m, --mirror: Manjaro Mirror. Can be one of: 'testing' and 'stable' (default: 'stable')"
	printf '\t%s\n' "-t, --type: Installation type. Can be one of: 'desktop' and 'server' (default: 'server')"
	printf '\t%s\n' "-g, --graphic: GPU type. Can be one of: 'nvidia' and 'intel' (no default)"
	printf '\t%s\n' "--wayland, --no-wayland: Enable Wayland (Not recommended yet) (off by default)"
	printf '\t%s\n' "--docker, --no-docker: Install Docker & compose (on by default)"
	printf '\t%s\n' "--ftpd: Install specified ftpd and enable sshguard for it. Can be one of: 'pure-ftpd' and 'vsftpd' (no default)"
	printf '\t%s\n' "--openvpn3, --no-openvpn3: Install openvpn3-linux (off by default)"
	printf '\t%s\n' "--openssh-hpn, --no-openssh-hpn: Install hpn patched openssh (off by default)"
	printf '\t%s\n' "--borg-server, --no-borg-server: Install borg backup server (off by default)"
	printf '\t%s\n' "--deluged, --no-deluged: Install deluge daemon (off by default)"
	printf '\t%s\n' "--swapspace, --no-swapspace: Install swapspace (on by default)"
	printf '\t%s\n' "--iptables, --no-iptables: Setup iptables (on by default)"
	printf '\t%s\n' "--certbot, --no-certbot: Install cerbot and enable auto renewal (off by default)"
	printf '\t%s\n' "--k8s-utils, --no-k8s-utils: Install kubernetes utilities (on by default)"
	printf '\t%s\n' "--mount-hdds, --no-mount-hdds: Register and mount attached HDDs (off by default)"
	printf '\t%s\n' "--dry-run, --no-dry-run: Do not execute scripts (off by default)"
	printf '\t%s\n' "-h, --help: Prints help"
}


parse_commandline()
{
	while test $# -gt 0
	do
		_key="$1"
		case "$_key" in
			-m|--mirror)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_mirror="$(mirror_type "$2" "mirror")" || exit 1
				shift
				evaluate_strictness "$_key" "$_arg_mirror"
				;;
			--mirror=*)
				_arg_mirror="$(mirror_type "${_key##--mirror=}" "mirror")" || exit 1
				evaluate_strictness "$_key" "$_arg_mirror"
				;;
			-m*)
				_arg_mirror="$(mirror_type "${_key##-m}" "mirror")" || exit 1
				evaluate_strictness "$_key" "$_arg_mirror"
				;;
			-t|--type)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_type="$(instance_type "$2" "type")" || exit 1
				shift
				evaluate_strictness "$_key" "$_arg_type"
				;;
			--type=*)
				_arg_type="$(instance_type "${_key##--type=}" "type")" || exit 1
				evaluate_strictness "$_key" "$_arg_type"
				;;
			-t*)
				_arg_type="$(instance_type "${_key##-t}" "type")" || exit 1
				evaluate_strictness "$_key" "$_arg_type"
				;;
			-g|--graphic)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_graphic="$(gpu_type "$2" "graphic")" || exit 1
				shift
				evaluate_strictness "$_key" "$_arg_graphic"
				;;
			--graphic=*)
				_arg_graphic="$(gpu_type "${_key##--graphic=}" "graphic")" || exit 1
				evaluate_strictness "$_key" "$_arg_graphic"
				;;
			-g*)
				_arg_graphic="$(gpu_type "${_key##-g}" "graphic")" || exit 1
				evaluate_strictness "$_key" "$_arg_graphic"
				;;
			--no-wayland|--wayland)
				_arg_wayland="on"
				test "${1:0:5}" = "--no-" && _arg_wayland="off"
				;;
			--no-docker|--docker)
				_arg_docker="on"
				test "${1:0:5}" = "--no-" && _arg_docker="off"
				;;
			--ftpd)
				test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
				_arg_ftpd="$(ftpd_type "$2" "ftpd")" || exit 1
				shift
				evaluate_strictness "$_key" "$_arg_ftpd"
				;;
			--ftpd=*)
				_arg_ftpd="$(ftpd_type "${_key##--ftpd=}" "ftpd")" || exit 1
				evaluate_strictness "$_key" "$_arg_ftpd"
				;;
			--no-openvpn3|--openvpn3)
				_arg_openvpn3="on"
				test "${1:0:5}" = "--no-" && _arg_openvpn3="off"
				;;
			--no-openssh-hpn|--openssh-hpn)
				_arg_openssh_hpn="on"
				test "${1:0:5}" = "--no-" && _arg_openssh_hpn="off"
				;;
			--no-borg-server|--borg-server)
				_arg_borg_server="on"
				test "${1:0:5}" = "--no-" && _arg_borg_server="off"
				;;
			--no-deluged|--deluged)
				_arg_deluged="on"
				test "${1:0:5}" = "--no-" && _arg_deluged="off"
				;;
			--no-swapspace|--swapspace)
				_arg_swapspace="on"
				test "${1:0:5}" = "--no-" && _arg_swapspace="off"
				;;
			--no-iptables|--iptables)
				_arg_iptables="on"
				test "${1:0:5}" = "--no-" && _arg_iptables="off"
				;;
			--no-certbot|--certbot)
				_arg_certbot="on"
				test "${1:0:5}" = "--no-" && _arg_certbot="off"
				;;
			--no-k8s-utils|--k8s-utils)
				_arg_k8s_utils="on"
				test "${1:0:5}" = "--no-" && _arg_k8s_utils="off"
				;;
			--no-mount-hdds|--mount-hdds)
				_arg_mount_hdds="on"
				test "${1:0:5}" = "--no-" && _arg_mount_hdds="off"
				;;
			--no-dry-run|--dry-run)
				_arg_dry_run="on"
				test "${1:0:5}" = "--no-" && _arg_dry_run="off"
				;;
			-h|--help)
				print_help
				exit 0
				;;
			-h*)
				print_help
				exit 0
				;;
			*)
				_PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
				;;
		esac
		shift
	done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash
# Validation of values





### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


mirror_type="$_arg_mirror"
instance_type="$_arg_type"

if [ "$instance_type" = 'desktop' ] && [ -z "$_arg_graphic" ]; then
  echo 'You have to specify GPU type'
  exit 1
fi

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}")"  &> /dev/null && pwd)"

declare -a include_list

set -ex

# instance independent

case "$mirror_type" in
  'stable') include_list+=('001-rank-mirror.bash') ;;
  'testing') include_list+=('000-setup-mirror-testing.bash') ;;
esac

include_list+=(
  '002-makepkg.bash'
  '003-pkgfile.bash'
  '004-yay.bash'
  '005-vim.bash'
  '052-htop.bash'
  '058-exfat.bash'
)

if [ "$_arg_openvpn3" = 'on' ]; then
  include_list+=('040-openvpn3.bash')
fi

if [ "$_arg_docker" = 'on' ]; then
  include_list+=('046-docker.bash')
fi

if [ "$_arg_k8s_utils" = 'on' ]; then
  include_list+=('034-k8s-utils.bash')
fi

if [ "$_arg_swapspace" = 'on' ]; then
  include_list+=('071-swapspace')
fi


# instance dependent

case "$instance_type" in
  'desktop')
    include_list+=(
      '006-zsh.bash'
      '020-cleanup-kde.bash'
      '022-basic-kde.bash'
      '023-theme-kde.bash'
      '024-jetbrains.bash'
      '026-chrome.bash'
      '028-font.bash'
      '030-ssh-agent.bash'
      '032-vorta.bash'
      '036-authy.bash'
      '038-1password.bash'
      '042-ntf3.bash'
      '044-slack.bash'
      '048-aws.bash'
      '060-gnome-utils.bash'
      '066-mpv.bash'
      '070-wine.bash'
    )

    if [ "$_arg_wayland" = 'on' ]; then
      include_list+=('016-plasma-wayland.bash')
    fi

    case "$_arg_graphic" in
      'intel') include_list+=('068-mpv-config-intel.bash') ;;
      'nvidia')
        include_list+=(
          '015-nvidia-modsetting.bash'
          '068-mpv-config-nvidia.bash'
        )

        if [ "$_arg_wayland" = 'on' ]; then
          include_list+=('018-plasma-wayland-nvidia.bash')
        fi
        ;;
    esac

    ;;
  'server')
    include_list+=(
      '006-zsh-server.bash'
      '010-iptables-nft.bash'
      '050-network-performance.bash'
    )

    if [ "$_arg_openssh_hpn" = 'on' ]; then
      include_list+=('008-openssh-hpn.bash')
    else
      include_list+=('008-openssh.bash')
    fi

    if [ "$_arg_deluged" = 'on' ]; then
      include_list+=('056-deluge-server.bash')
    fi

    if [ "$_arg_borg_server" = 'on' ]; then
      include_list+=('062-borg.bash')
    fi

    if [ "$_arg_certbot" = 'on' ]; then
      include_list+=('064-certbot.bash')
    fi

    if [ "$_arg_mount_hdds" = 'on' ]; then
      include_list+=('099-spin-down-hdd.bash' '100-mount-hdds.bash')
    fi

    if [ "$_arg_ftpd" = 'vsftpd' ]; then
      include_list+=('054-vsftpd.bash')
    elif [ "$_arg_ftpd" = 'pure-ftpd' ]; then
      include_list+=('054-pure-ftpd.bash')
    fi

    if [ "$_arg_iptables" = 'on' ]; then
      include_list+=(
        '009-sshguard.bash'
        '010-iptables-reset.bash'
        '011-iptables-basic.bash'
        '014-iptables-save.bash'
      )

      if [ "$_arg_deluged" = 'on' ]; then
        include_list+=('012-iptables-deluge.bash')
      fi

      if [ "$_arg_ftpd" = 'vsftpd' ]; then
        include_list+=('009-sshguard-with-vsftpd.bash' '013-iptables-ftp.bash')
      elif [ "$_arg_ftpd" = 'pure-ftpd' ]; then
        include_list+=('009-sshguard-with-pure-ftpd.bash' '013-iptables-ftp.bash')
      fi
    fi
    ;;
esac

mapfile -t script_list < <(printf "%s\n" "${include_list[@]}" | sort -n)
echo "${script_list[@]}"

for f in "${script_list[@]}"; do
  if [ "$_arg_dry_run" = 'off' ]; then
    ${SCRIPT_DIR}/components/${f}
  else
    echo "${SCRIPT_DIR}/components/${f}"
  fi
done

# ] <-- needed because of Argbash
